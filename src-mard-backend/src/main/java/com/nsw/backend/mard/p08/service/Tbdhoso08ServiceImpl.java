/*
 * Created on 18 Jul 2017 ( Time 08:46:37 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.nsw.backend.mard.p08.service;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.nsw.backend.mard.p08.constant.Constant08;
import com.nsw.backend.mard.p08.exception.NSWException;
import com.nsw.backend.mard.p08.helper.ReflectionHelper;
import com.nsw.backend.mard.p08.model.*;
import com.nsw.backend.mard.p08.repositories.*;
import com.nsw.backend.util.DateTimeUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * Implementation of Tbdhoso08Service
 */
@Service("tbdhoso08Service")
@Transactional
public class Tbdhoso08ServiceImpl implements Tbdhoso08Service {
    private final Tbdcvvsty08Repository vetHygRepo;
    private final Tbdcvcnkd08Repository quarantineRepo;
    private final Tbdhoso08Repository regProfileRepo;
    private final Tbdycsua08Repository requestEditRepo;
    private final Tbdycrut08Repository requestCancelRepo;
    private final Tbdlichsu08Service hstService;
    private List<String> pendingProfiles;
    private LoadingCache<String, Boolean> pendingQueue;

    @Autowired
    public Tbdhoso08ServiceImpl(Tbdcvvsty08Repository vetHygRepo, Tbdcvcnkd08Repository quarantineRepo, Tbdhoso08Repository regProfileRepo, Tbdycsua08Repository requestEditRepo, Tbdycrut08Repository requestCancelRepo, Tbdlichsu08Service hstService) {
        this.vetHygRepo = vetHygRepo;
        this.quarantineRepo = quarantineRepo;
        this.regProfileRepo = regProfileRepo;
        this.requestEditRepo = requestEditRepo;
        this.requestCancelRepo = requestCancelRepo;
        this.hstService = hstService;
    }

    @Override
    public Tbdhoso08 findById(Long fiIdHoso) {
        return regProfileRepo.findOne(fiIdHoso);
    }

    @Override
    public List<Tbdhoso08> findAll() {
        return regProfileRepo.findAll();
    }

    @Override
    public Tbdhoso08 save(Tbdhoso08 regProfile) {
        regProfile = regProfileRepo.save(regProfile);
        if (StringUtils.isEmpty(regProfile.getFiHSCode())) {
            regProfile.setFiHSCode(generateMaHoso(regProfile.getFiIdHS()));
        }
        regProfile.getLstAtch().removeIf(dinhkem -> StringUtils.isEmpty(dinhkem.getFiDuongDan()));
        regProfile.getLstAtch().forEach(dinhkem -> dinhkem.setFiHoatdong(Constant08.ACTIVE));
        regProfile.getLstProduct().forEach(product -> {
            if (StringUtils.isEmpty(product.getFiProductCode())) {
                product.setFiProductCode(String.format("%d", product.getFiIdProduct()));
            }
        });
        return regProfileRepo.save(regProfile);
    }

    @Override
    public void delete(Long fiIdHoso) {
        regProfileRepo.delete(fiIdHoso);
    }

    @Override
    public void delete(Tbdhoso08 entity) {
        regProfileRepo.delete(entity);
    }

    @Override
    public Tbdhoso08 create(Tbdhoso08 tbdhoso08) {
        tbdhoso08.setFiActive(true);
        tbdhoso08.setFiHSStatus(0L);
        return this.save(tbdhoso08);
    }

    @Override
    public Tbdhoso08 update(Tbdhoso08 entity) {
        Tbdhoso08 currentHS = regProfileRepo.findOne(entity.getFiIdHS());
        entity.initListIfNull();
        entity.setFiCreatedBy(currentHS.getFiCreatedBy());
        entity.setFiUpdatedBy(currentHS.getFiUpdatedBy());
        entity.setFiCreatedDate(currentHS.getFiCreatedDate());
        if (entity.getFiHSStatus() == null) {
            entity.setFiHSStatus(currentHS.getFiHSStatus());
        }
        entity.setFiActive(true);
        return this.save(entity);
    }

    @Override
    @Transactional
    public Tbdhoso08 updateAfterSendNSW(Tbdhoso08 updatedProfile) throws NSWException {
        if (updatedProfile.getFiHSStatus() != Constant08.Hoso08Status.CHO_TIEP_NHAN.getId()
                && updatedProfile.getFiHSStatus() != Constant08.Hoso08Status.DA_TIEP_NHAN.getId()
                && updatedProfile.getFiHSStatus() != Constant08.Hoso08Status.TU_CHOI_YCR.getId()
                && updatedProfile.getFiHSStatus() != Constant08.Hoso08Status.DONG_Y_YCS.getId()
                && updatedProfile.getFiHSStatus() != Constant08.Hoso08Status.YEU_CAU_BO_SUNG.getId()) {
            throw new NSWException("Trạng thái hồ sơ không hợp lệ");
        }
        // in-active hồ sơ gốc
        Tbdhoso08 originalProfile = this.findById(updatedProfile.getFiIdHS());

        if (!originalProfile.isFiActive()) throw new NSWException("Hồ sơ không hợp lệ");

        originalProfile.setFiActive(false);

        Long fiIdParentHS = updatedProfile.getFiIdHS();
        String fiParentHSCode = updatedProfile.getFiHSCode();
        String fiModifyReason = updatedProfile.getFiModifyReason();

        ReflectionHelper.cleanIdAndFields(updatedProfile.getLstExporter());
        ReflectionHelper.cleanIdAndFields(updatedProfile.getLstIsolatedLocation());
        ReflectionHelper.cleanIdAndFields(updatedProfile.getLstMfgFactory());
        ReflectionHelper.cleanIdAndFields(updatedProfile.getLstProdMfr());
        ReflectionHelper.cleanIdAndFields(updatedProfile.getLstProduct());
        ReflectionHelper.cleanIdAndFields(updatedProfile.getLstAtch());

        // tạo hồ sơ tạm
        updatedProfile.setFiIdHSParent(fiIdParentHS);
        updatedProfile.setFiIdHS(null);
        updatedProfile.setFiActive(true);

        updatedProfile.setFiCreatedDate(new Date());
        updatedProfile = this.save(updatedProfile);

        if (updatedProfile.getFiHSStatus() == Constant08.Hoso08Status.YEU_CAU_BO_SUNG.getId()) {
            updatedProfile.setFiHSStatus((long) Constant08.Hoso08Status.CHO_TIEP_NHAN.getId());
            regProfileRepo.save(updatedProfile);
        }

        if (updatedProfile.getFiHSStatus() == Constant08.Hoso08Status.DA_TIEP_NHAN.getId()
                || updatedProfile.getFiHSStatus() == Constant08.Hoso08Status.TU_CHOI_YCR.getId()
                || updatedProfile.getFiHSStatus() == Constant08.Hoso08Status.DONG_Y_YCS.getId()) {
            updatedProfile.setFiHSStatus((long) Constant08.Hoso08Status.CHO_TIEP_NHAN_YCS.getId());
            // them mới vào bảng Tbdycsuahs10
            Tbdycsua08 ycsua08 = new Tbdycsua08();
            ycsua08.setFiIdHS(fiIdParentHS);
            ycsua08.setFiHSCode(fiParentHSCode);
            ycsua08.setFiRequestedDate(new Date());
            ycsua08.setFiActive(Constant08.ACTIVE);
            ycsua08.setFiStatus((long) Constant08.Cvcnkd08EditStatus.TAO_MOI.getId());
            ycsua08.setFiReason(fiModifyReason);
            ycsua08.setFiCreatedBy(updatedProfile.getFiUpdatedBy());
            requestEditRepo.save(ycsua08);
            regProfileRepo.save(updatedProfile);
        }
        regProfileRepo.save(originalProfile);
        return updatedProfile;
    }

    @Override
    public Tbdhoso08 findByFiHSCode(String fiMaHoso) {
        return regProfileRepo.findFirstByFiHSCodeAndFiActive(fiMaHoso, true).orElse(null);
    }

    @Override
    public Tbdycrut08 cancelHoso(Tbdycrut08 ruts08) throws NSWException {
        Tbdhoso08 regProfile = regProfileRepo.findOne(ruts08.getFiIdHS());
        if (regProfile == null || regProfile.getFiHSStatus() != Constant08.Hoso08Status.CHO_TIEP_NHAN.getId()
                && regProfile.getFiHSStatus() != Constant08.Hoso08Status.DA_TIEP_NHAN.getId()
                && regProfile.getFiHSStatus() != Constant08.Hoso08Status.YEU_CAU_BO_SUNG.getId()
                && regProfile.getFiHSStatus() != Constant08.Hoso08Status.TU_CHOI_YCR.getId()
                && regProfile.getFiHSStatus() != Constant08.Hoso08Status.DONG_Y_YCS.getId()) {
            throw new NSWException("Trạng thái hồ sơ không hợp lệ");
        }
        ruts08.setFiActive(Constant08.ACTIVE);
        ruts08.setFiStatus((long) Constant08.Hoso08DeleteStatus.TAO_MOI.getId());
        ruts08.setFiRequestedDate(DateTimeUtils.getDate());

        if (Constant08.Hoso08Status.CHO_TIEP_NHAN.getId() == regProfile.getFiHSStatus()
                || Constant08.Hoso08Status.YEU_CAU_BO_SUNG.getId() == regProfile.getFiHSStatus()) {
            ruts08.setFiRequestType(0L); // hố sơ chưa tiếp nhận
            internalStatusUpdate(regProfile, Constant08.Hoso08Status.DA_RUT_HO_SO.getId());
        } else {
            ruts08.setFiRequestType(1L);  // hồ sơ đã tiếp nhận
            internalStatusUpdate(regProfile, Constant08.Hoso08Status.CHO_TIEP_NHAN_YCR.getId());
        }
        return requestCancelRepo.save(ruts08);
    }

    @Override
    public FilterResult searchHoso(FilterForm filterForm) {
        filterForm.setFiLstNSWFileCode(findLstNSWFileCode(filterForm));
        return regProfileRepo.searchHoso(filterForm);
    }

    private List<String> findLstNSWFileCode(FilterForm filterForm) {
        if (!filterForm.isValidForLicenseQuery()) return new ArrayList<>();
        List<String> listValidFiNSWFileCode = new ArrayList<>();
        listValidFiNSWFileCode.addAll(vetHygRepo.findGPByFilter(filterForm.getLicenseNo(), filterForm.getLicenseStartDate(), filterForm.getLicenseEndDate())
                .stream().map(Tbdcvvsty08::getFiHSCode).collect(Collectors.toList()));
        listValidFiNSWFileCode.addAll(quarantineRepo.findGPByFilter(filterForm.getLicenseNo(), filterForm.getLicenseStartDate(), filterForm.getLicenseEndDate())
                .stream().map(Tbdcvcnkd08::getFiHSCode).collect(Collectors.toList()));
        return listValidFiNSWFileCode;
    }

    @Override
    public String generateMaHoso(Long id) {
        //HSCode Pattern: {Ministry's name}{ProcedureCode[2]}{Year[2]}{ID of HS[7]}
        return String.format("%s%s%02d%07d",
                Constant08.MINISTRY_NAME,
                Constant08.MARD_PROC_CODE,
                Calendar.getInstance().get(Calendar.YEAR) % 100,
                id);
    }

    public void internalStatusUpdate(String fiHSCode, long status) throws NSWException {
        if (status != -1) {
            Tbdhoso08 regProfile = this.findByFiHSCode(fiHSCode);
            if (regProfile == null) {
                throw new NSWException("Mã hồ sơ không tồn tại");
            }
            internalStatusUpdate(regProfile, status);
        } else {
            throw new IllegalArgumentException("Status must not be -1");
        }
    }

    @Override
    public void internalStatusUpdate(Tbdhoso08 regProfile, long status) {
        regProfile.setFiHSStatus(status);
        String hstContent = "Cập nhật trạng thái hồ sơ: " + Constant08.Hoso08Status.findById((int) status).getName();
        hstService.save(createHistory(regProfile, hstContent,
                "NSW",
                regProfile.getFiTaxCode()));
        this.save(regProfile);
    }

    @Override
    public void rollbackFailedRequestUpdate(Tbdhoso08 result) {
        Tbdhoso08 parent = regProfileRepo.findOne(result.getFiIdHSParent());
        parent.setFiActive(true);

        regProfileRepo.save(parent);
        regProfileRepo.delete(result.getFiIdHS());
        getSignPendingProfiles().invalidate(result.getFiHSCode());
    }

    @Override
    public void rollbackFailedRequestUpdate(String nswFileCode) {
        Tbdhoso08 current = findByFiHSCode(nswFileCode);
        if (Boolean.TRUE.equals(getSignPendingProfiles().getIfPresent(nswFileCode))) {
            rollbackFailedRequestUpdate(current);
        }
    }

    private Tbdlichsu08 createHistory(Tbdhoso08 regProfile, String hstContent, String senderCode, String senderName) {
        Tbdlichsu08 history = new Tbdlichsu08();
        history.setFiSenderCode(senderCode);
        history.setFiSenderName(senderName);
        history.setFiSenderUnitName(regProfile.getFiImporterName());
        history.setFiContent(hstContent);
        history.setFiHSCode(regProfile.getFiHSCode());
        history.setFiIdHS(regProfile.getFiIdHS());
        history.setFiTimeline(new Date());
        history.setFiReceiverCode("BNN");
        history.setFiReceiverName("Bộ Nông nghiệp");
        history.setFiStatus(regProfile.getFiHSStatus());
        return history;
    }

    @Override
    public LoadingCache<String, Boolean> getSignPendingProfiles() {
        if (pendingQueue == null) {
            pendingProfiles = new ArrayList<>();
            this.pendingQueue = CacheBuilder.newBuilder()
                    .maximumSize(10000)
                    .expireAfterWrite(5, TimeUnit.MINUTES)
                    .removalListener(removalNotification -> {
                        if (removalNotification.wasEvicted()) {
                            //we should rollback automatically
                            String nswFileCode = (String) removalNotification.getKey();
                            rollbackFailedRequestUpdate(findByFiHSCode(nswFileCode));
                        }
                    })
                    .build(new CacheLoader<String, Boolean>() {
                        @Override
                        public Boolean load(String s) throws Exception {
                            return pendingProfiles.contains(s);
                        }
                    });
        }
        return pendingQueue;
    }
}
